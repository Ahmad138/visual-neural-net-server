{"version":3,"file":"prediction.service.js","sourceRoot":"","sources":["prediction.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;;GAEG;AACH,qBAA+B,eAAe,CAAC,CAAA;AAC/C,qBAA+B,eAAe,CAAC,CAAA;AAI/C,2BAA+B,iBAAiB,CAAC,CAAA;AAGjD;IACE,2BAAqB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAEvB,kBAAa,GAAG,0CAA0C,CAAC,CAAE,iBAAiB;IAFpD,CAAC;IAInC,iDAAqB,GAArB,UAAuB,WAAqB;QAC1C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC;aAC1D,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IAEO,uCAAW,GAAnB,UAAoB,GAAa;QAC/B,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,0BAA0B;QAC1B,MAAM,CAAC,IAAI,IAAI,EAAG,CAAC;IACrB,CAAC;IAEO,uCAAW,GAAnB,UAAqB,KAAU;QAC7B,oEAAoE;QACpE,8DAA8D;QAC9D,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;YAC1C,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;QAC1E,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;QAChD,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAzBH;QAAC,iBAAU,EAAE;;yBAAA;IA0Bb,wBAAC;AAAD,CAAC,AAzBD,IAyBC;AAzBY,yBAAiB,oBAyB7B,CAAA","sourcesContent":["/**\n * Created by jamesweaver on 7/19/16.\n */\nimport { Injectable }     from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Headers, RequestOptions } from '@angular/http';\n\nimport { PredictionResponse }           from '../model/prediction-response';\nimport { Observable }     from 'rxjs/Observable';\n\n@Injectable()\nexport class PredictionService {\n  constructor (private http: Http) {}\n\n  private predictionUrl = 'http://localhost:8080/prediction?values=';  // URL to web API\n\n  getPredictionResponse (inputValues: string[]): Observable<PredictionResponse> {\n    return this.http.get(this.predictionUrl + inputValues.join())\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  private extractData(res: Response) {\n    let body = res.json();\n    //return body.data || { };\n    return body || { };\n  }\n\n  private handleError (error: any) {\n    // In a real world app, we might use a remote logging infrastructure\n    // We'd also dig deeper into the error to get a better message\n    let errMsg = (error.message) ? error.message :\n      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.error(errMsg); // log to console instead\n    return Observable.throw(errMsg);\n  }\n}\n"]}